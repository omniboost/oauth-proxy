package mysql

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// OauthToken represents a row from 'oauth_proxy.oauth_tokens'.
type OauthToken struct {
	ID                       int            `json:"id"`                          // id
	App                      string         `json:"app"`                         // app
	Type                     string         `json:"type"`                        // type
	GrantType                string         `json:"grant_type"`                  // grant_type
	ClientID                 string         `json:"client_id"`                   // client_id
	ClientSecret             string         `json:"client_secret"`               // client_secret
	Username                 string         `json:"username"`                    // username
	OriginalRefreshToken     string         `json:"original_refresh_token"`      // original_refresh_token
	RefreshToken             string         `json:"refresh_token"`               // refresh_token
	AccessToken              string         `json:"access_token"`                // access_token
	ExpiresAt                sql.NullTime   `json:"expires_at"`                  // expires_at
	CreatedAt                time.Time      `json:"created_at"`                  // created_at
	UpdatedAt                time.Time      `json:"updated_at"`                  // updated_at
	CodeExchangeResponseBody sql.NullString `json:"code_exchange_response_body"` // code_exchange_response_body
	CodeVerifier             string         `json:"code_verifier"`               // code_verifier
	RefreshTokenExpiresAt    sql.NullTime   `json:"refresh_token_expires_at"`    // refresh_token_expires_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [OauthToken] exists in the database.
func (ot *OauthToken) Exists() bool {
	return ot._exists
}

// Deleted returns true when the [OauthToken] has been marked for deletion
// from the database.
func (ot *OauthToken) Deleted() bool {
	return ot._deleted
}

// Insert inserts the [OauthToken] to the database.
func (ot *OauthToken) Insert(ctx context.Context, db DB) error {
	switch {
	case ot._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ot._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO oauth_proxy.oauth_tokens (` +
		`app, type, grant_type, client_id, client_secret, username, original_refresh_token, refresh_token, access_token, expires_at, created_at, updated_at, code_exchange_response_body, code_verifier, refresh_token_expires_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, ot.App, ot.Type, ot.GrantType, ot.ClientID, ot.ClientSecret, ot.Username, ot.OriginalRefreshToken, ot.RefreshToken, ot.AccessToken, ot.ExpiresAt, ot.CreatedAt, ot.UpdatedAt, ot.CodeExchangeResponseBody, ot.CodeVerifier, ot.RefreshTokenExpiresAt)
	res, err := db.ExecContext(ctx, sqlstr, ot.App, ot.Type, ot.GrantType, ot.ClientID, ot.ClientSecret, ot.Username, ot.OriginalRefreshToken, ot.RefreshToken, ot.AccessToken, ot.ExpiresAt, ot.CreatedAt, ot.UpdatedAt, ot.CodeExchangeResponseBody, ot.CodeVerifier, ot.RefreshTokenExpiresAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	ot.ID = int(id)
	// set exists
	ot._exists = true
	return nil
}

// Update updates a [OauthToken] in the database.
func (ot *OauthToken) Update(ctx context.Context, db DB) error {
	switch {
	case !ot._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ot._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE oauth_proxy.oauth_tokens SET ` +
		`app = ?, type = ?, grant_type = ?, client_id = ?, client_secret = ?, username = ?, original_refresh_token = ?, refresh_token = ?, access_token = ?, expires_at = ?, created_at = ?, updated_at = ?, code_exchange_response_body = ?, code_verifier = ?, refresh_token_expires_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ot.App, ot.Type, ot.GrantType, ot.ClientID, ot.ClientSecret, ot.Username, ot.OriginalRefreshToken, ot.RefreshToken, ot.AccessToken, ot.ExpiresAt, ot.CreatedAt, ot.UpdatedAt, ot.CodeExchangeResponseBody, ot.CodeVerifier, ot.RefreshTokenExpiresAt, ot.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ot.App, ot.Type, ot.GrantType, ot.ClientID, ot.ClientSecret, ot.Username, ot.OriginalRefreshToken, ot.RefreshToken, ot.AccessToken, ot.ExpiresAt, ot.CreatedAt, ot.UpdatedAt, ot.CodeExchangeResponseBody, ot.CodeVerifier, ot.RefreshTokenExpiresAt, ot.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [OauthToken] to the database.
func (ot *OauthToken) Save(ctx context.Context, db DB) error {
	if ot.Exists() {
		return ot.Update(ctx, db)
	}
	return ot.Insert(ctx, db)
}

// Upsert performs an upsert for [OauthToken].
func (ot *OauthToken) Upsert(ctx context.Context, db DB) error {
	switch {
	case ot._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO oauth_proxy.oauth_tokens (` +
		`id, app, type, grant_type, client_id, client_secret, username, original_refresh_token, refresh_token, access_token, expires_at, created_at, updated_at, code_exchange_response_body, code_verifier, refresh_token_expires_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`app = VALUES(app), type = VALUES(type), grant_type = VALUES(grant_type), client_id = VALUES(client_id), client_secret = VALUES(client_secret), username = VALUES(username), original_refresh_token = VALUES(original_refresh_token), refresh_token = VALUES(refresh_token), access_token = VALUES(access_token), expires_at = VALUES(expires_at), created_at = VALUES(created_at), updated_at = VALUES(updated_at), code_exchange_response_body = VALUES(code_exchange_response_body), code_verifier = VALUES(code_verifier), refresh_token_expires_at = VALUES(refresh_token_expires_at)`
	// run
	logf(sqlstr, ot.ID, ot.App, ot.Type, ot.GrantType, ot.ClientID, ot.ClientSecret, ot.Username, ot.OriginalRefreshToken, ot.RefreshToken, ot.AccessToken, ot.ExpiresAt, ot.CreatedAt, ot.UpdatedAt, ot.CodeExchangeResponseBody, ot.CodeVerifier, ot.RefreshTokenExpiresAt)
	if _, err := db.ExecContext(ctx, sqlstr, ot.ID, ot.App, ot.Type, ot.GrantType, ot.ClientID, ot.ClientSecret, ot.Username, ot.OriginalRefreshToken, ot.RefreshToken, ot.AccessToken, ot.ExpiresAt, ot.CreatedAt, ot.UpdatedAt, ot.CodeExchangeResponseBody, ot.CodeVerifier, ot.RefreshTokenExpiresAt); err != nil {
		return logerror(err)
	}
	// set exists
	ot._exists = true
	return nil
}

// Delete deletes the [OauthToken] from the database.
func (ot *OauthToken) Delete(ctx context.Context, db DB) error {
	switch {
	case !ot._exists: // doesn't exist
		return nil
	case ot._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM oauth_proxy.oauth_tokens ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, ot.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ot.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ot._deleted = true
	return nil
}

// OauthTokenByID retrieves a row from 'oauth_proxy.oauth_tokens' as a [OauthToken].
//
// Generated from index 'oauth_tokens_id_pkey'.
func OauthTokenByID(ctx context.Context, db DB, id int) (*OauthToken, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, app, type, grant_type, client_id, client_secret, username, original_refresh_token, refresh_token, access_token, expires_at, created_at, updated_at, code_exchange_response_body, code_verifier, refresh_token_expires_at ` +
		`FROM oauth_proxy.oauth_tokens ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	ot := OauthToken{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ot.ID, &ot.App, &ot.Type, &ot.GrantType, &ot.ClientID, &ot.ClientSecret, &ot.Username, &ot.OriginalRefreshToken, &ot.RefreshToken, &ot.AccessToken, &ot.ExpiresAt, &ot.CreatedAt, &ot.UpdatedAt, &ot.CodeExchangeResponseBody, &ot.CodeVerifier, &ot.RefreshTokenExpiresAt); err != nil {
		return nil, logerror(err)
	}
	return &ot, nil
}

// OauthTokensByAppClientIDClientSecret retrieves a row from 'oauth_proxy.oauth_tokens' as a [OauthToken].
//
// Generated from index 'ot_app_client_id_client_secret'.
func OauthTokensByAppClientIDClientSecret(ctx context.Context, db DB, app, clientID, clientSecret string) ([]*OauthToken, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, app, type, grant_type, client_id, client_secret, username, original_refresh_token, refresh_token, access_token, expires_at, created_at, updated_at, code_exchange_response_body, code_verifier, refresh_token_expires_at ` +
		`FROM oauth_proxy.oauth_tokens ` +
		`WHERE app = ? AND client_id = ? AND client_secret = ?`
	// run
	logf(sqlstr, app, clientID, clientSecret)
	rows, err := db.QueryContext(ctx, sqlstr, app, clientID, clientSecret)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*OauthToken
	for rows.Next() {
		ot := OauthToken{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ot.ID, &ot.App, &ot.Type, &ot.GrantType, &ot.ClientID, &ot.ClientSecret, &ot.Username, &ot.OriginalRefreshToken, &ot.RefreshToken, &ot.AccessToken, &ot.ExpiresAt, &ot.CreatedAt, &ot.UpdatedAt, &ot.CodeExchangeResponseBody, &ot.CodeVerifier, &ot.RefreshTokenExpiresAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ot)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// OauthTokenByAppClientIDClientSecretRefreshToken retrieves a row from 'oauth_proxy.oauth_tokens' as a [OauthToken].
//
// Generated from index 'ot_app_client_id_client_secret_refresh_token'.
func OauthTokenByAppClientIDClientSecretRefreshToken(ctx context.Context, db DB, app, clientID, clientSecret, refreshToken string) (*OauthToken, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, app, type, grant_type, client_id, client_secret, username, original_refresh_token, refresh_token, access_token, expires_at, created_at, updated_at, code_exchange_response_body, code_verifier, refresh_token_expires_at ` +
		`FROM oauth_proxy.oauth_tokens ` +
		`WHERE app = ? AND client_id = ? AND client_secret = ? AND refresh_token = ?`
	// run
	logf(sqlstr, app, clientID, clientSecret, refreshToken)
	ot := OauthToken{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, app, clientID, clientSecret, refreshToken).Scan(&ot.ID, &ot.App, &ot.Type, &ot.GrantType, &ot.ClientID, &ot.ClientSecret, &ot.Username, &ot.OriginalRefreshToken, &ot.RefreshToken, &ot.AccessToken, &ot.ExpiresAt, &ot.CreatedAt, &ot.UpdatedAt, &ot.CodeExchangeResponseBody, &ot.CodeVerifier, &ot.RefreshTokenExpiresAt); err != nil {
		return nil, logerror(err)
	}
	return &ot, nil
}

// OauthTokensByAppOriginalRefreshToken retrieves a row from 'oauth_proxy.oauth_tokens' as a [OauthToken].
//
// Generated from index 'ot_app_original_refresh_token'.
func OauthTokensByAppOriginalRefreshToken(ctx context.Context, db DB, app, originalRefreshToken string) ([]*OauthToken, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, app, type, grant_type, client_id, client_secret, username, original_refresh_token, refresh_token, access_token, expires_at, created_at, updated_at, code_exchange_response_body, code_verifier, refresh_token_expires_at ` +
		`FROM oauth_proxy.oauth_tokens ` +
		`WHERE app = ? AND original_refresh_token = ?`
	// run
	logf(sqlstr, app, originalRefreshToken)
	rows, err := db.QueryContext(ctx, sqlstr, app, originalRefreshToken)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*OauthToken
	for rows.Next() {
		ot := OauthToken{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ot.ID, &ot.App, &ot.Type, &ot.GrantType, &ot.ClientID, &ot.ClientSecret, &ot.Username, &ot.OriginalRefreshToken, &ot.RefreshToken, &ot.AccessToken, &ot.ExpiresAt, &ot.CreatedAt, &ot.UpdatedAt, &ot.CodeExchangeResponseBody, &ot.CodeVerifier, &ot.RefreshTokenExpiresAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ot)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// OauthTokenByAppRefreshToken retrieves a row from 'oauth_proxy.oauth_tokens' as a [OauthToken].
//
// Generated from index 'ot_app_refresh_token'.
func OauthTokenByAppRefreshToken(ctx context.Context, db DB, app, refreshToken string) (*OauthToken, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, app, type, grant_type, client_id, client_secret, username, original_refresh_token, refresh_token, access_token, expires_at, created_at, updated_at, code_exchange_response_body, code_verifier, refresh_token_expires_at ` +
		`FROM oauth_proxy.oauth_tokens ` +
		`WHERE app = ? AND refresh_token = ?`
	// run
	logf(sqlstr, app, refreshToken)
	ot := OauthToken{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, app, refreshToken).Scan(&ot.ID, &ot.App, &ot.Type, &ot.GrantType, &ot.ClientID, &ot.ClientSecret, &ot.Username, &ot.OriginalRefreshToken, &ot.RefreshToken, &ot.AccessToken, &ot.ExpiresAt, &ot.CreatedAt, &ot.UpdatedAt, &ot.CodeExchangeResponseBody, &ot.CodeVerifier, &ot.RefreshTokenExpiresAt); err != nil {
		return nil, logerror(err)
	}
	return &ot, nil
}
