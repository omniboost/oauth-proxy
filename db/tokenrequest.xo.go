// Package db contains the types for schema ''.
package db

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/xo/xoutil"
)

// TokenRequest represents a row from 'token_requests'.
type TokenRequest struct {
	ID                   int           `json:"id"`                     // id
	App                  string        `json:"app"`                    // app
	RequestClientID      string        `json:"request_client_id"`      // request_client_id
	RequestClientSecret  string        `json:"request_client_secret"`  // request_client_secret
	RequestRefreshToken  string        `json:"request_refresh_token"`  // request_refresh_token
	RequestCode          string        `json:"request_code"`           // request_code
	RequestRedirectURL   string        `json:"request_redirect_url"`   // request_redirect_url
	RequestCodeVerifier  string        `json:"request_code_verifier"`  // request_code_verifier
	ResponseAccessToken  string        `json:"response_access_token"`  // response_access_token
	ResponseTokenType    string        `json:"response_token_type"`    // response_token_type
	ResponseRefreshToken string        `json:"response_refresh_token"` // response_refresh_token
	ResponseExpiry       xoutil.SqTime `json:"response_expiry"`        // response_expiry
	ResponseExtra        string        `json:"response_extra"`         // response_extra
	CreatedAt            xoutil.SqTime `json:"created_at"`             // created_at
	UpdatedAt            xoutil.SqTime `json:"updated_at"`             // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TokenRequest exists in the database.
func (tr *TokenRequest) Exists() bool {
	return tr._exists
}

// Deleted provides information if the TokenRequest has been deleted from the database.
func (tr *TokenRequest) Deleted() bool {
	return tr._deleted
}

// Insert inserts the TokenRequest to the database.
func (tr *TokenRequest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO token_requests (` +
		`app, request_client_id, request_client_secret, request_refresh_token, request_code, request_redirect_url, request_code_verifier, response_access_token, response_token_type, response_refresh_token, response_expiry, response_extra, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tr.App, tr.RequestClientID, tr.RequestClientSecret, tr.RequestRefreshToken, tr.RequestCode, tr.RequestRedirectURL, tr.RequestCodeVerifier, tr.ResponseAccessToken, tr.ResponseTokenType, tr.ResponseRefreshToken, tr.ResponseExpiry, tr.ResponseExtra, tr.CreatedAt, tr.UpdatedAt)
	res, err := db.Exec(sqlstr, tr.App, tr.RequestClientID, tr.RequestClientSecret, tr.RequestRefreshToken, tr.RequestCode, tr.RequestRedirectURL, tr.RequestCodeVerifier, tr.ResponseAccessToken, tr.ResponseTokenType, tr.ResponseRefreshToken, tr.ResponseExpiry, tr.ResponseExtra, tr.CreatedAt, tr.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	tr.ID = int(id)
	tr._exists = true

	return nil
}

// Update updates the TokenRequest in the database.
func (tr *TokenRequest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE token_requests SET ` +
		`app = ?, request_client_id = ?, request_client_secret = ?, request_refresh_token = ?, request_code = ?, request_redirect_url = ?, request_code_verifier = ?, response_access_token = ?, response_token_type = ?, response_refresh_token = ?, response_expiry = ?, response_extra = ?, created_at = ?, updated_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, tr.App, tr.RequestClientID, tr.RequestClientSecret, tr.RequestRefreshToken, tr.RequestCode, tr.RequestRedirectURL, tr.RequestCodeVerifier, tr.ResponseAccessToken, tr.ResponseTokenType, tr.ResponseRefreshToken, tr.ResponseExpiry, tr.ResponseExtra, tr.CreatedAt, tr.UpdatedAt, tr.ID)
	_, err = db.Exec(sqlstr, tr.App, tr.RequestClientID, tr.RequestClientSecret, tr.RequestRefreshToken, tr.RequestCode, tr.RequestRedirectURL, tr.RequestCodeVerifier, tr.ResponseAccessToken, tr.ResponseTokenType, tr.ResponseRefreshToken, tr.ResponseExpiry, tr.ResponseExtra, tr.CreatedAt, tr.UpdatedAt, tr.ID)
	return err
}

// Save saves the TokenRequest to the database.
func (tr *TokenRequest) Save(db XODB) error {
	if tr.Exists() {
		return tr.Update(db)
	}

	return tr.Insert(db)
}

// Delete deletes the TokenRequest from the database.
func (tr *TokenRequest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tr._exists {
		return nil
	}

	// if deleted, bail
	if tr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM token_requests WHERE id = ?`

	// run query
	XOLog(sqlstr, tr.ID)
	_, err = db.Exec(sqlstr, tr.ID)
	if err != nil {
		return err
	}

	// set deleted
	tr._deleted = true

	return nil
}

// TokenRequestByID retrieves a row from 'token_requests' as a TokenRequest.
//
// Generated from index 'token_requests_id_pkey'.
func TokenRequestByID(db XODB, id int) (*TokenRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, app, request_client_id, request_client_secret, request_refresh_token, request_code, request_redirect_url, request_code_verifier, response_access_token, response_token_type, response_refresh_token, response_expiry, response_extra, created_at, updated_at ` +
		`FROM token_requests ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	tr := TokenRequest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tr.ID, &tr.App, &tr.RequestClientID, &tr.RequestClientSecret, &tr.RequestRefreshToken, &tr.RequestCode, &tr.RequestRedirectURL, &tr.RequestCodeVerifier, &tr.ResponseAccessToken, &tr.ResponseTokenType, &tr.ResponseRefreshToken, &tr.ResponseExpiry, &tr.ResponseExtra, &tr.CreatedAt, &tr.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &tr, nil
}
