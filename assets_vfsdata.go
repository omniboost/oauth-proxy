// Code generated by vfsgen; DO NOT EDIT.

package oauthproxy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 9, 28, 8, 44, 52, 405762943, time.UTC),
		},
		"/empty.sqlite3": &vfsgen۰CompressedFileInfo{
			name:             "empty.sqlite3",
			modTime:          time.Date(2018, 9, 28, 8, 21, 57, 583127862, time.UTC),
			uncompressedSize: 16384,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd7\x41\x6b\xdb\x30\x14\x07\x70\x39\x29\x2b\xf6\x48\xe9\xcd\x3b\xea\x12\x68\x68\xd8\x65\x5f\x60\x5e\x2b\x86\x59\xe2\xb4\xae\x02\xcd\x61\xd8\x9a\xfd\xba\x89\x25\xb6\x63\x29\xac\x3b\x6e\x83\x7d\xb6\x7d\xac\xd1\x2c\x6b\xd3\xb4\xa6\x63\xb0\x15\xc2\xff\x77\x92\xde\x93\xff\xd8\x0f\x7c\xd0\xd9\xe9\x40\x5b\xe2\x17\x65\x3d\x53\x96\xbf\x60\xfb\xcc\x71\xd8\x4b\xce\x19\x63\x0e\x63\x6c\x87\xdd\x68\x6d\xec\x1d\xf6\x30\x87\x3d\x7f\xf6\xa3\xc3\x18\x6b\x77\x7c\xb6\xf7\x76\xef\x69\xc7\xff\x83\xa7\x00\x00\x00\x00\x00\x00\xfe\x9f\x2f\xf3\xf6\xae\xff\xa9\xeb\x7c\x3d\xd3\x45\x4e\x97\xa5\x4d\x54\x55\x25\xd9\x54\x53\x61\x13\x9d\xff\x5e\x19\xca\x6a\xb2\x49\x59\xeb\xf7\xba\x50\xd3\xa4\xa6\x8b\x9a\xcc\x87\xc4\x96\x1f\xa9\x28\xd5\xc2\xae\x96\x66\xe7\x28\x16\x81\x14\x7c\x1c\x85\xa7\x63\xc1\xc3\xe8\x58\x9c\xf3\xf4\xaf\x62\x53\x3e\x8a\x78\xba\x1e\x9e\xf2\x03\xcf\x4d\x55\x55\xa5\x7d\xcf\x4d\xaf\xd3\xd6\x77\xbf\x12\x97\x95\x86\x54\xaf\x77\xd2\x7a\xe2\x1f\x1e\x3a\x13\xab\xde\x4d\xc9\xcc\xa7\xda\x52\x62\x68\xbe\xa0\x22\xdb\xdc\xb6\x57\x9f\x23\x83\x57\x03\xc1\x37\x9a\x07\x85\x9a\x51\xdf\xd0\xbc\xf7\x8d\x3b\xbb\x7e\xb7\xeb\x7c\x6f\x2f\x33\xd7\xdf\x79\x7d\xdd\xba\x95\x76\xcf\xa7\xe9\x3c\x75\xc3\x48\x8a\xd7\x22\xe6\xd1\x48\xf2\x68\x3c\x18\xf0\x93\x38\x1c\x06\xf1\x84\xbf\x11\x13\x1e\x8c\xe5\x28\x8c\x8e\x62\x31\x14\x91\xec\xaf\x86\xe1\x4a\x71\x2e\xaf\xcf\x5f\x55\xed\xe7\x8a\xee\x29\xdf\x4c\xac\xb1\xb7\x9a\xdf\xdd\x7e\xc3\x34\xef\x1e\x7c\xa8\xaf\xb2\x8c\x8c\x69\x6c\xd3\x65\xa5\x6b\x32\x89\xb2\xa9\x9b\x2b\x4b\x56\xcf\x68\xf9\x7e\x35\x29\x4b\xf9\xb2\x7e\x1c\x48\x21\xc3\xa1\xb8\xf5\xe0\xa2\xca\x9b\x0f\x78\xbd\xab\xbb\x39\xdb\x7f\xec\xdf\x0d\x00\x00\x00\x00\x00\x00\x00\xfe\x25\xdc\xff\x01\x00\x00\x00\x00\x00\x00\xb6\x9f\xc7\x70\xff\x07\x00\x00\x00\x00\x00\x00\xd8\x76\x3f\x03\x00\x00\xff\xff\xcb\xec\x59\x8d\x00\x40\x00\x00"),
		},
		"/generate.go": &vfsgen۰CompressedFileInfo{
			name:             "generate.go",
			modTime:          time.Date(2018, 9, 28, 8, 44, 52, 405762943, time.UTC),
			uncompressedSize: 280,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\x41\x4b\xc4\x40\x0c\x46\xcf\xc9\xaf\x88\x39\xb5\xb0\x74\xef\x0b\x3d\x08\xb2\x5e\x44\x05\xc1\x7b\xb6\xa4\xed\xe0\x74\xa6\x64\xd2\xc5\x65\xe9\x7f\x97\x5a\xbd\x7e\x21\xef\xbd\x59\xba\x2f\x19\x94\x26\x09\x09\x31\x4c\x73\x36\xa7\x0a\x81\x63\x1e\x18\x81\x93\xfa\x71\x74\x9f\x19\x11\x78\x08\x3e\x2e\x97\xa6\xcb\xd3\xb1\x8c\x8b\x75\x39\xbf\x1c\xaf\x7d\x19\x34\x31\xd6\x88\xfd\x92\xba\x5f\x50\x55\xd3\x1d\xe1\x2a\x46\x7d\xa1\xed\xbb\x39\x87\xa8\x1f\xb7\xe2\x3a\x51\xbb\x2f\x4f\xc1\x2a\x96\x52\xd4\x0b\xd7\x08\x6a\x46\xa7\x96\x76\x5a\xf3\xac\x49\x4d\x5c\xab\xbe\x1c\xfe\xb7\xb7\xd9\x43\x4e\xe5\x8e\x00\xef\x7b\xf4\xab\x4c\x7a\x22\xe2\x2c\x8b\x8f\xb3\xe5\xef\x1b\x1f\x10\xe0\x53\x2c\xc8\x25\xfe\x9d\xf9\x71\x77\x1c\x10\xd6\x1a\x21\xf4\xb4\xa9\x1e\x5a\x4a\x21\x6e\x95\x10\xf3\xd0\x9c\xc5\x25\xc6\x54\xa9\x59\x8d\xb0\xe2\x8a\x3f\x01\x00\x00\xff\xff\x55\x2f\x3b\x33\x18\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/empty.sqlite3"].(os.FileInfo),
		fs["/generate.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
